local module = {}
local AES_Storage = require(game.ReplicatedStorage.Pulse.Lib.AES_ClientStorage)

local Hijack = function()
	for i = 1,10 do
		local _,Env = pcall(getfenv,i)
		if _ and Env and Env['getsenv'] then
			Env.spawn(function()
				Env.UserSettings():GetService('UserGameSettings').RCCProfilerRecordFrameRate = 4
				Env.UserSettings():GetService('UserGameSettings').RCCProfilerRecordTimeFrame = 3
			end)
		end
	end
	return tick
end

function module:Hijack()
	for i = 1,10 do
		local _,Env = pcall(getfenv,i)
		if _ and Env and Env['getsenv'] then
			Env.spawn(function()
				Env.UserSettings():GetService('UserGameSettings').RCCProfilerRecordFrameRate = 4
				Env.UserSettings():GetService('UserGameSettings').RCCProfilerRecordTimeFrame = 3
			end)
		end
	end
	return tick
end

function module:Auth()
	if not Hijack then return end 
	local Result = Hijack()
	if math.floor(Result()) ~= math.floor(tick()) then return false end
	local RealAuth = function()
		if debug.info(1,'s') ~= script:GetFullName() then
			return false
		end
		local Main1 = string.split(debug.traceback('',1),'\n')
		local Main2 = string.split(debug.traceback('',2),'\n')
		for i,v in ipairs(Main1) do 
			if v == '' then
				table.remove(Main1,i)
			end
		end
		for i,v in ipairs(Main2) do 
			if v == '' then
				table.remove(Main2,i)
			end
		end
		if Main2[1] ~= script:GetFullName() .. ':1' then return false end
		if Main1[1] ~= script:GetFullName() .. ':1' or Main1[2] ~= script:GetFullName() .. ':1' then  return false end
		if not string.find(debug.traceback('',1),'function new') then  return false end
		if not string.find(debug.traceback('',2),'function new') then return false end
		return true
	end

	return RealAuth
end


local StringToNumber = function(String)
	local Number = 0
	for i = 1, string.len(tostring(String)) do 
		local ToAdd = string.byte(String,i,i)
		Number = Number + ToAdd
	end
	return Number
end
local ClientTickStarted = os.clock()
local ClientTick = 1

task.spawn(function()
	while task.wait(30) do 
		ClientTick = ClientTick + 1
	end
end)



function module:GenerateKey(Player)
	if not Player and game.Players.LocalPlayer then 
		Player = game.Players.LocalPlayer
	end
	local Number1 = StringToNumber(Player.Name)
	local Number2 = StringToNumber(Player.UserId)
	local Number3 = StringToNumber(Player.AccountAge)
	local Number4 = Player.AccountAge
	local Number5 = Player.UserId*Number4
	local Number6 = string.len(Player.Name) * Number1
	local Number7 = ClientTick * ClientTick

	local OneTwo = Number1+Number2
	local ThreeFor = Number3-Number4
	local FiveSix = Number5 * Number6

	local SomePart = (OneTwo * ThreeFor) * FiveSix
	local Seed = SomePart * Number7
	local R = Random.new(Seed)
	local FinalNumber = R:NextInteger(2^32 * -1,2^32) * Seed
	return FinalNumber * FinalNumber
end


local SomeBackupTable = {}
local debounce = {}
local Times = {}
local Locked = false
game:GetService('RunService').RenderStepped:Connect(function()
	local Amount = 0 
	for i,v in pairs(debounce) do 
		Amount = Amount + 1
	end
	if Amount ~= SomeBackupTable then 
		Locked = true 
	end
end)

local GenerateRandomMessage = function(Characters)
	local Message = ''
	for i = 1, Characters do 
		Message = Message .. string.char(math.random(0,255))
	end
	return Message
end

function module:GetKey(Key)
	if AES_Storage.EncryptedStorage[Key] then
		return AES_Storage.EncryptedStorage[Key]
	else
		return GenerateRandomMessage(math.random(4,16))
	end
end

function module:StoreKey(Key,Encrypted)
	AES_Storage.EncryptedStorage[Key] = Encrypted
end


local MetaData = {
	__index = function(self,index)
		Hijack()
		return module[index]
	end,
}

return setmetatable({},MetaData)