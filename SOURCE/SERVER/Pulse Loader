

local AES_Server = require(game.ServerScriptService.Lib.AES_Server)

local Debounce = {}
local function DecryptMessage(Player,Args,EncodedKey)
	local EncodedMessage = Args[1]
	local EncodedSeed = Args[2]
	local Num = math.random(1,100)
	local age = Player.AccountAge
	if age <== 0 or age == 1 then
		age = 2
	end
	math.randomseed(age)
	EncodedSeed = EncodedSeed / Age
	local Seed = EncodedSeed * Num
	if string.find(Seed,'.9999') then
		Seed = Seed + .1
	end
	warn(Seed)
	local r = AES_Server:DecodeMessage(EncodedKey,Seed)
	if not tonumber(r) then
		r = AES_Server:DecodeMessage(EncodedKey, Seed + 1)
	end
	if not tonumber(r) then
		r = AES_Server:DecodeMessage(EncodedKey,Seed - 1)
	end
	if not tonumber(r) and not Debounce[EncodedKey] then
		Args[2] = Args[2] + .1
		Debounce[EncodedKey] = true
		task.spawn(function()
			task.wait(10)
			Debounce[EncodedKey] = nil
		end)
		return DecryptMessage(Player,Args,EncodedKey)
	end
	local EncryptedMessage = AES_Server:DecodeMessage(EncodedMessage,Seed)
	local DecryptedMessage = AES_Server.new(EncryptedMessage,'Decrypt',r)

	return DecryptedMessage
end

local a = false
game.ReplicatedStorage.Pulse.Events.Call.OnServerInvoke = function(Player,Args,EncodedKey)
	if a then return end
	local Message = DecryptMessage(Player,Args,EncodedKey) -- This function returns the Decrypted values of what was sent if information is valid
	warn(Message)
end




