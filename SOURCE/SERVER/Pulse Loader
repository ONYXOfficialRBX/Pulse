

local AES_Server = require(game.ServerScriptService.Lib.AES_Server)
local Archive = {}
local Debounce = {}

local StringToNumber = function(String)
	local Number = 0
	for i = 1, string.len(tostring(String)) do 
		local ToAdd = string.byte(String,i,i)
		Number = Number + ToAdd
	end
	return Number
end

local function GenerateKey(Player,ClientTick)
	if not ClientTick and not ClientTicks[Player] then
		ClientTick = 1
		task.spawn(function()
			while ClientTicks[Player] do 
				task.wait(30)
				ClientTicks[Player] = ClientTicks[Player] + 1
			end
		end)
	end
	if not Player and game.Players.LocalPlayer then 
		Player = game.Players.LocalPlayer
	elseif not Player and not game.Players.LocalPlayer then 
		error('No Valid Player Provided.')
	end
	local Number1 = StringToNumber(Player.Name)
	local Number2 = StringToNumber(Player.UserId)
	local Number3 = StringToNumber(Player.AccountAge)
	local Number4 = Player.AccountAge
	local Number5 = Player.UserId*Number4
	local Number6 = string.len(Player.Name) * Number1
	local Number7 = ClientTick * ClientTick

	local OneTwo = Number1+Number2
	local ThreeFor = Number3-Number4
	local FiveSix = Number5 * Number6

	local SomePart = (OneTwo * ThreeFor) * FiveSix
	local Seed = SomePart * Number7
	local R = Random.new(Seed)
	local FinalNumber = R:NextInteger(2^62 * -1,2^62) * Seed
	return FinalNumber * FinalNumber
end

local function DecryptMessage(Player,Args,Key)
	local DecryptedMessage = AES_Server.new(Args,'Decrypt',Key)
	return DecryptedMessage
end

game.Players.PlayerRemoving:Connect(function(Player)
	if Archive[Player] then 
		Archive[Player] = nil
	end
end)

game.ReplicatedStorage.Pulse.Events.Call.OnServerInvoke = function(Player,Args,EncodedKey)
	local Key = GenerateKey(Player,1)
	local Message = DecryptMessage(Player,Args,Key) -- This function returns the Decrypted values of what was sent if information is valid
	if not Message.Detection then 

	end
end




