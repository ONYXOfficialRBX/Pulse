

local AES_Server = require(game.ServerScriptService.Lib.AES_Server)
local Archive = {}
local Debounce = {}
local function DecryptMessage(Player,Args,EncodedKey)
	if not Archive[Player] then 
		Archive[Player] = {}
	end
	local EncodedMessage = Args[1]
	local EncodedSeed = Args[2]
	local Num = math.random(1,100)
	local age = Player.AccountAge
	if age == 0 or age == 1 then
		age = 2
	end
	math.randomseed(age)
	EncodedSeed = EncodedSeed / age
	local Seed = EncodedSeed * Num
	if string.find(Seed,'.9999') then
		Seed = Seed + .1
	end
	warn(Seed)
	local r = AES_Server:DecodeMessage(EncodedKey,Seed)
	if not tonumber(r) then
		r = AES_Server:DecodeMessage(EncodedKey, Seed + 1)
	end
	if not tonumber(r) then
		r = AES_Server:DecodeMessage(EncodedKey,Seed - 1)
	end
	if not tonumber(r) and not Debounce[EncodedKey] then
		Args[2] = Args[2] + .1
		Debounce[EncodedKey] = true
		task.spawn(function()
			task.wait(10)
			Debounce[EncodedKey] = nil
		end)
		return DecryptMessage(Player,Args,EncodedKey)
	end
	if Archive[Player][r] then 
		Player:Kick('Unexpected Client Behavior')
		return
	end
	local EncryptedMessage = AES_Server:DecodeMessage(EncodedMessage,Seed)
	local DecryptedMessage = AES_Server.new(EncryptedMessage,'Decrypt',r)
	Archive[Player][r] = true
	return DecryptedMessage
end

game.Players.PlayerRemoving:Connect(function(Player)
	if Archive[Player] then 
		Archive[Player] = nil
	end
end)

local a = false
game.ReplicatedStorage.Pulse.Events.Call.OnServerInvoke = function(Player,Args,EncodedKey)
	if a then return end
	local Message = DecryptMessage(Player,Args,EncodedKey) -- This function returns the Decrypted values of what was sent if information is valid
	warn(Message)
end




